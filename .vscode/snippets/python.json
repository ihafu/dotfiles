{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "python_main": {
        "prefix": "sn if name",
        "body": [
            "if __name__ == \"__main__\":",
			"	"
        ],
        "description": "python main function"
    },
    "python_unittest": {
        "prefix": "sn unittest",
        "body": [
            "import unittest",
            "",
            "class TestFoo(unittest.TestCase):",
            "    def test_bar(self):",
            "        self.assertEqual(True, True)",
            "",
            "if __name__ == \"__main__\":",
            "    unittest.main()"
        ],
        "description": "python unittest case"
    },
    "python_metaclass": {
        "prefix": "sn metaclass",
        "body": [
            "from abc import ABCMeta, abstractmethod",
            "",
            "class BaseClass(metaclass=ABCMeta):",
            "    def __init__(self):",
            "        pass",
            "",
            "    @abstractmethod",
            "    def foo(self):",
            "        pass"
        ],
        "description": "python main function"
    },
    "python_sys_path": {
        "prefix": "sn sys path",
        "body": [
            "import os",
            "import sys",
            "sys.path.append(os.path.join(os.path.dirname(__file__), ''))"
        ],
        "description": "python relative path append"
    }
}
